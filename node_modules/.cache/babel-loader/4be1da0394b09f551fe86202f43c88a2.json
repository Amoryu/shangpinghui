{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'PaySuccess',\n  beforeRouteEnter: function beforeRouteEnter(to, from, next) {\n    //在渲染该组件的对应路由被确认前调用\n    // 不能用this获取组件实例（因为调用前还没跳转到该组件）\n    if (from.path == '/pay') {\n      next();\n    } else {\n      next(false);\n    }\n  },\n  beforeRouteUpdate: function beforeRouteUpdate(to, from) {// 在当前【路由改变，但是该组件被复用时】调用(跳转的仍是本路由，只是参数不一样)\n    // 举例来说，对于一个带有动态参数的路径 `/users/:id`，在 `/users/1` 和 `/users/2` 之间跳转的时候，\n    // 由于会渲染同样的 `UserDetails` 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。\n    // 因为在这种情况发生的时候，组件已经挂载好了，导航守卫可以访问组件实例 `this`\n  },\n  beforeRouteLeave: function beforeRouteLeave(to, from) {// 在【导航离开渲染该组件的对应路由】时调用\n    // 与 `beforeRouteUpdate` 一样，它可以访问组件实例 `this`\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;AAkBA;EACAA,kBADA;EAEAC,gBAFA,4BAEAC,EAFA,EAEAC,IAFA,EAEAC,IAFA,EAEA;IACA;IACA;IACA;MACAA;IACA,CAFA,MAEA;MACAA;IACA;EACA,CAVA;EAWAC,iBAXA,6BAWAH,EAXA,EAWAC,IAXA,EAWA,CACA;IACA;IACA;IACA;EACA,CAhBA;EAiBAG,gBAjBA,4BAiBAJ,EAjBA,EAiBAC,IAjBA,EAiBA,CACA;IACA;EACA;AApBA","names":["name","beforeRouteEnter","to","from","next","beforeRouteUpdate","beforeRouteLeave"],"sourceRoot":"src/pages/PaySuccess","sources":["index.vue"],"sourcesContent":["<template>\n  <div class=\"paysuccess\">\n    <div class=\"success\">\n      <h3>\n        <img src=\"./images/right.png\" width=\"48\" height=\"48\" />\n        支付成功！\n      </h3>\n      <div class=\"paydetail\">\n        <p class=\"button\">\n          <router-link class=\"btn-look\" to=\"/center\">查看订单</router-link>\n          <router-link class=\"btn-goshop\" to=\"/\">继续购物</router-link>\n        </p>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'PaySuccess',\n  beforeRouteEnter(to, from, next) {\n    //在渲染该组件的对应路由被确认前调用\n    // 不能用this获取组件实例（因为调用前还没跳转到该组件）\n    if (from.path == '/pay') {\n      next()\n    } else {\n      next(false)\n    }\n  },\n  beforeRouteUpdate(to, from) {\n    // 在当前【路由改变，但是该组件被复用时】调用(跳转的仍是本路由，只是参数不一样)\n    // 举例来说，对于一个带有动态参数的路径 `/users/:id`，在 `/users/1` 和 `/users/2` 之间跳转的时候，\n    // 由于会渲染同样的 `UserDetails` 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。\n    // 因为在这种情况发生的时候，组件已经挂载好了，导航守卫可以访问组件实例 `this`\n  },\n  beforeRouteLeave(to, from) {\n    // 在【导航离开渲染该组件的对应路由】时调用\n    // 与 `beforeRouteUpdate` 一样，它可以访问组件实例 `this`\n  },\n}\n</script>\n\n<style lang=\"less\" scoped>\n.paysuccess {\n  margin: 20px auto;\n  padding: 25px;\n  border: 1px solid rgb(211, 211, 211);\n  width: 1200px;\n  width: 1148px;\n\n  .success {\n    width: 500px;\n    margin: 0 auto;\n\n    h3 {\n      margin: 20px 0;\n      font-weight: 700;\n      font-size: 20px;\n      line-height: 30px;\n\n      img {\n        max-width: 100%;\n        vertical-align: middle;\n        border: 0;\n        margin-right: 14px;\n      }\n    }\n\n    .paydetail {\n      margin-left: 66px;\n      font-size: 15px;\n\n      .button {\n        margin: 30px 0;\n        line-height: 26px;\n\n        a {\n          display: inline-block;\n          box-sizing: border-box;\n          text-align: center;\n          vertical-align: middle;\n          cursor: pointer;\n          border-radius: 2px;\n          user-select: none;\n          font-size: 18px;\n          padding: 4px 20px;\n          line-height: 22px;\n          text-decoration: none;\n\n          &.btn-look {\n            margin-right: 13px;\n            color: #fff;\n            background-color: #e1251b;\n            border: 1px solid #e1251b;\n          }\n\n          &.btn-goshop {\n            color: #666;\n            background-color: #eee;\n            border: 1px solid #e1e1e1;\n          }\n        }\n      }\n    }\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}