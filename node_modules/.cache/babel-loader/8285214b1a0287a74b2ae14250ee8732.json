{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.error.cause.js\";\n// axios二次封装,因为要用到请求和响应拦截器\nimport axios from 'axios'; // 引入进度条\n\nimport nprogress from 'nprogress'; // 引入样式\n\nimport detail from '@/store/detail';\nimport 'nprogress/nprogress.css'; //start:进度条开始    done:进度条结束\n// import store from '@/store';\n\nvar request = axios.create({\n  // 配置对象\n  // 基础路径,发送请求时,路径中会出现api\n  baseURL: '/api',\n  // 请求超时时间\n  timeout: 5000\n}); // 请求拦截器\n\nrequest.interceptors.request.use(function (config) {\n  // config是一个配置对象,包含一个headers属性\n  // 进度条开始动\n  // 验证游客身份\n  // if (store.state.detail.uuid_token) {\n  //   // 请求头添加一个字段\n  //   config.headers.userTempId = store.state.detail.uuid_token\n  // }\n  nprogress.start();\n  return config;\n}); // 响应拦截器\n\nrequest.interceptors.response.use(function (res) {\n  // 响应成功的回调函数\n  // 进度条结束\n  nprogress.done();\n  return res.data;\n}, function (error) {\n  // 响应失败的回调函数\n  return Promise.reject(new Error('fail'));\n}); // 对外暴露request\n\nexport default request;","map":{"version":3,"names":["axios","nprogress","detail","request","create","baseURL","timeout","interceptors","use","config","start","response","res","done","data","error","Promise","reject","Error"],"sources":["D:/前端攻克/尚硅谷Vue/项目/app/src/api/request.js"],"sourcesContent":["// axios二次封装,因为要用到请求和响应拦截器\r\nimport axios from 'axios';\r\n// 引入进度条\r\nimport nprogress from 'nprogress';\r\n// 引入样式\r\nimport detail from '@/store/detail'\r\nimport 'nprogress/nprogress.css';\r\n//start:进度条开始    done:进度条结束\r\n// import store from '@/store';\r\n\r\nconst request = axios.create({\r\n  // 配置对象\r\n  // 基础路径,发送请求时,路径中会出现api\r\n  baseURL: '/api',\r\n  // 请求超时时间\r\n  timeout: 5000,\r\n\r\n});\r\n// 请求拦截器\r\nrequest.interceptors.request.use((config) => {\r\n  // config是一个配置对象,包含一个headers属性\r\n  // 进度条开始动\r\n  // 验证游客身份\r\n  // if (store.state.detail.uuid_token) {\r\n  //   // 请求头添加一个字段\r\n  //   config.headers.userTempId = store.state.detail.uuid_token\r\n  // }\r\n\r\n  nprogress.start();\r\n  return config;\r\n})\r\n// 响应拦截器\r\nrequest.interceptors.response.use((res) => {\r\n  // 响应成功的回调函数\r\n  // 进度条结束\r\n  nprogress.done();\r\n  return res.data;\r\n}, (error) => {\r\n  // 响应失败的回调函数\r\n  return Promise.reject(new Error('fail'))\r\n})\r\n\r\n// 对外暴露request\r\nexport default request"],"mappings":";;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,SAAP,MAAsB,WAAtB,C,CACA;;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AACA,OAAO,yBAAP,C,CACA;AACA;;AAEA,IAAMC,OAAO,GAAGH,KAAK,CAACI,MAAN,CAAa;EAC3B;EACA;EACAC,OAAO,EAAE,MAHkB;EAI3B;EACAC,OAAO,EAAE;AALkB,CAAb,CAAhB,C,CAQA;;AACAH,OAAO,CAACI,YAAR,CAAqBJ,OAArB,CAA6BK,GAA7B,CAAiC,UAACC,MAAD,EAAY;EAC3C;EACA;EACA;EACA;EACA;EACA;EACA;EAEAR,SAAS,CAACS,KAAV;EACA,OAAOD,MAAP;AACD,CAXD,E,CAYA;;AACAN,OAAO,CAACI,YAAR,CAAqBI,QAArB,CAA8BH,GAA9B,CAAkC,UAACI,GAAD,EAAS;EACzC;EACA;EACAX,SAAS,CAACY,IAAV;EACA,OAAOD,GAAG,CAACE,IAAX;AACD,CALD,EAKG,UAACC,KAAD,EAAW;EACZ;EACA,OAAOC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,MAAV,CAAf,CAAP;AACD,CARD,E,CAUA;;AACA,eAAef,OAAf"},"metadata":{},"sourceType":"module"}