{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n// axios二次封装,因为要用到请求和响应拦截器\nimport axios from 'axios'; // 引入进度条\n\nimport nprogress from 'nprogress'; // 引入样式\n// import store from '@/store';\n\nimport detail from '@/store/detail';\nimport 'nprogress/nprogress.css'; // import store from '@/store';\n\nimport user from '@/store/user'; //start:进度条开始    done:进度条结束\n\nconst request = axios.create({\n  // 配置对象\n  // 基础路径,发送请求时,路径中会出现api\n  baseURL: '/api',\n  // 请求超时时间\n  timeout: 5000\n}); // 请求拦截器\n\nrequest.interceptors.request.use(config => {\n  // config是一个配置对象,包含一个headers属性\n  // 进度条开始动\n  // 验证游客身份\n  if (detail.state.uuid_token) {\n    // 请求头添加一个字段\n    config.headers.userTempId = detail.state.uuid_token;\n  } // 需要携带token给服务器\n\n\n  if (user.state.token) {\n    config.headers.token = user.state.token;\n  }\n\n  nprogress.start();\n  return config;\n}); // 响应拦截器\n\nrequest.interceptors.response.use(res => {\n  // 响应成功的回调函数\n  // 进度条结束\n  nprogress.done();\n  return res.data;\n}, error => {\n  // 响应失败的回调函数\n  return Promise.reject(new Error('fail'));\n}); // 对外暴露request\n\nexport default request;","map":null,"metadata":{},"sourceType":"module"}